#!/usr/bin/python
# -*- coding: UTF-8 -*-

"""
This is a phonelog GTK+ GUI, designed to use with a custom daemon,
the SHR daemon, and when ready, opimd.

Written by Tom Hacohen. (tom@stosb.com)

Licensed by GPLv2
"""

__version__ = "0.15.3"

import dbus
import gobject, gtk
from datetime import datetime
import time
import os.path
import sqlite3
import shutil
import re

try:
	import mokoui
	use_mokoui = True
except:
	use_mokoui = False

#constants
"""PHONELOG_BUSNAME = "org.freesmartphone.opimd"
PHONELOG_OBJECTPATH = "/org/freesmartphone/PIM/Log"
PHONELOG_INTERFACE = "org.freesmartphone.PIM.Log.Calls"
"""

PHONELOG_BUSNAME = "org.smartphone.opimd"
PHONELOG_OBJECTPATH = "/org/smartphone/PIM/Log"
PHONELOG_INTERFACE = "org.smartphone.PIM.Log.Calls"

CONTACTS_BUSNAME = 'org.freesmartphone.ogsmd'
CONTACTS_OBJECTPATH = '/org/freesmartphone/GSM/Device'
CONTACTS_INTERFACE = 'org.freesmartphone.GSM.SIM'

PHONE_BUSNAME = 'org.freesmartphone.ogsmd'
PHONE_OBJECTPATH = '/org/freesmartphone/GSM/Device'
PHONE_INTERFACE = 'org.freesmartphone.GSM.Call'

CONFIGURATION_DIR = "/home/root/.phonelog/"
TIME_FILE = CONFIGURATION_DIR + "time.dat"
CONFIGURATION_FILE = CONFIGURATION_DIR + "phonelog.conf"
DEMO_CONFIG_PATH = "/usr/share/phonelog/skeleton/phonelog.conf"

#OPHONEKITD related
OPHONEKITD_DB = "/var/db/phonelog.db"
CALL_STATUS_INCOMING = 0
CALL_STATUS_OUTGOING = 1
CALL_STATUS_ACTIVE = 2
CALL_STATUS_HELD = 3
CALL_STATUS_RELEASE = 4

#PAGES POSITIONS
PAGE_INCOMING = 0 
PAGE_OUTGOING = 1
PAGE_MISSED = 2
PAGE_GENERAL = 3
PAGE_SETTINGS = 4

class Configuration:
	__configuration = dict()
	def __init__(self, file):
		"""
		Reads the signal list from the file given as parameter
		(to launch, interface, busname, path, signal, rules) from to_launch=interface;busname;path;signal;rule1,rule2...
		"""
		self.setDefault()
		
		if not os.path.exists(file):
			shutil.copy(DEMO_CONFIG_PATH, file)
			
		regex = re.compile('^\s*([^=\s]*)\s*=\s*(.*)\s*\n$')
		comment_regex = re.compile('^\s*#')
		FILE = open(file,'r')

		print "Using configuration:"
		print "*********************"
		for line in FILE:
			if not comment_regex.match(line):
				parsed = regex.match(line)
				#ignore bad config lines
				if parsed != None:
					print line
					self.set(parsed.group(1), parsed.group(2))
		print "*********************"
		print "End of configuration"
			
		FILE.close()

	def setDirect(self, name, value):
		self.__configuration[name] = value
	def set(self, name, string):
		boolean_value = self.__extractBoolean(string)
		if boolean_value != None:
			self.setDirect(name, boolean_value)
			return

		numeric_value = self.__extractNumeric(string)
		if numeric_value != None:
			self.setDirect(name, numeric_value)
			return
		else:
			self.setDirect(name, string)
			return
	def get(self, name):
		if name in self.__configuration:
			return self.__configuration[name]
		else:
			return None
	def setDefault(self):
		self.setDirect('phonekitd', True)
		self.setDirect('received_limit', 50)
		self.setDirect('made_limit', 50)
		self.setDirect('missed_limit', 50)
		self.setDirect('general_limit', 50)
		self.setDirect('received_tab_name', "Received")
		self.setDirect('made_tab_name', "Made")
		self.setDirect('missed_tab_name', "Missed")
		self.setDirect('general_tab_name', "General")
		self.setDirect('startup_tab', "missed")
		self.setDirect('time_format', "%d-%m-%Y %H:%M:%S")
		return
	def __extractBoolean(self, string):
		low_case = string.lower()
		if low_case == "false":
			return False
		elif low_case == "true":
			return True
		else:
			return None
	def __extractNumeric(self, string):
		if re.match('^\d+$',string):
			return int(string)
		elif re.match('^\d+.?\d*$',string):
			return float(string)
		else:
			return None



class CallsTab:
	#POSITION IN MODEL
	CONTACT_POSITION = 0
	NUMBER_POSITION = 1
	DATE_POSITION = 2
	STATUS_POSITION = 4

	#unix time
	last_refresh = 1
	
	#ACTUAL GUI POSTITON
	CONTACT_COLUMN = 0
	DATE_COLUMN = 1
	__list = None
	__show_column = CONTACT_POSITION
	__tab = None
	__type = None
	__mark_new = False
	
	def __init__(self, type, last_time, mark_new = False):
		self.createList()
		self.__type = type
		self.__createCallsTab()
		self.last_refresh = last_time
		self.mark_new = mark_new
	def getList(self):
		return self.__list

	def getTab(self):
		return self.__tab
	def shouldMarkNew(self):
		return self.__mark_new
	def __getContactColumn(self):
		return self.CONTACT_COLUMN
	def __getDateColumn(self):
		return self.DATE_COLUMN
	def __createCallsTab(self):
		page = gtk.VBox()
		page.pack_start( self.__initScrolled() )
		buttons = gtk.HBox()
		page.pack_start(buttons, False, padding = 1)

		callButton = gtk.Button("Call")
		callButton.connect ("clicked", self.callButton_clicked)

		numberButton = gtk.Button("Show Numbers")
		numberButton.connect ("clicked", self.numberButton_clicked)

		buttons.pack_start(callButton, True, padding = 1)
		buttons.pack_start(numberButton, True, padding = 1)
		
		self.__tab = page
	def __createTreeView(self):
		self.__list = gtk.TreeView (gtk.TreeStore( gobject.TYPE_STRING, 
					gobject.TYPE_STRING,
					gobject.TYPE_STRING,
					gobject.TYPE_BOOLEAN,  #the boolean is there for coloring
					gobject.TYPE_STRING ) #should be changed to an icon?
					)
	def createList(self):

		self.__createTreeView()
			
		renderer = gtk.CellRendererText()
		#change text size as well?
		renderer.set_property('weight', 800)

		column0 = gtk.TreeViewColumn("Contact", renderer, text=0, weight_set=3)
		self.__list.insert_column( column0, self.__getContactColumn() )
		column0 = gtk.TreeViewColumn("Time", renderer, text=2, weight_set=3)
		self.__list.insert_column( column0, self.__getDateColumn())
		
	def __initScrolled(self):
		tab_content = self.__list
		if use_mokoui:
			scrolled = mokoui.FingerScroll()
		else:
			scrolled = gtk.ScrolledWindow()
			scrolled.set_policy(gtk.POLICY_NEVER, gtk.POLICY_AUTOMATIC)

		scrolled.add_with_viewport(tab_content)
		return scrolled
		
	def populateList(self, group_type = 1):
		"""
		group_type =
		0 - never group
		1/everything else - always group
		2 - group from the same type only.
		"""
		global phoneLog
		list = self.__list
		type = self.__type
		last_time = self.last_refresh
		visual_flag = self.shouldMarkNew()
		if config.get('phonekitd'):
			calls = getPhonekitCallsList(type)
			if len(calls) == 0:
				return False
		else:
			legacy_limit = typeFromLegacyDaemonType(type)
			calls = phoneLog.GetCallsList(type, config.get(legacy_limit + "_limit"))
			try: #hack because i send dbus empty
				calls[0]
			except:
				return False

		
		model = list.get_model()
		model.clear()
		last_parent_added = None
		
		#add to model
		for call in calls:
			
			number = call[0]
			contact = getContact(number)
			timestamp = float(call[1])	
			call_time = datetime.fromtimestamp( timestamp )
			status = call[2]



			#hack because of the (frameworks?) double quotes bug
			number = number.strip('"')

			
			#handle grouping types
			sametype_group = False
			if group_type == 0:
				#if we don't want to group, change the last_parent_added to None
				last_parent_added = None
			elif group_type == 2:
				sametype_group = True
				#HACK FOR THE GENERAL LIST
				if config.get('phonekitd'):
					missed = (call[3] == None)
					if missed and status == 0:
						status = 2
				else:
					missed = (call[2] == 2)
				
			#check if should be grouped
			parent = None
			if last_parent_added != None:
				if (((last_contact == contact) and (contact != "")) \
						or (last_number == number))\
					and (not sametype_group or last_status == status):
							
					parent = last_parent_added
				
			#update the last_statuses
			last_contact = contact
			last_number = number
			last_status = status


			#HACK for the general. MUST CHANGE!!!
			if sametype_group: 
				last_missed = missed

			#We want the contact to show as the number if it's not in the phonebook.
			if contact == "":
				contact = number
			
			#style status
			if status == 0:
				status = "↓"
			elif status == 1:
				status = "↑"
			elif status == 2:
				status = "↺"
				
			
			parent_added = model.append(parent, ( contact , 
					number ,
					call_time.strftime(config.get('time_format') ) ,
					visual_flag and (call_time > previous_time) ,
					status
					)
				)

			if parent == None:
				last_parent_added = parent_added

		return True										


	def callButton_clicked (self, button):
		global phoneObject
		list = self.__list
		
		number = self.__getSelectedNumber()
		
		if number != None:
			#TODO, once the highlevel api work, change to them.
			phoneObject.Initiate (number, 'voice')
		
	def numberButton_clicked (self, button):
		list = self.__list

		get_column = self.__getContactColumn()

		contact_column = list.get_column(get_column)
		renderer = contact_column.get_cell_renderers()[0]

		
		if self.__show_column == self.CONTACT_POSITION:
			self.__show_column = self.NUMBER_POSITION
			button_label = "Show Names"

		else:
			self.__show_column = self.CONTACT_POSITION
			button_label = "Show Numbers"
			
		button.set_label(button_label)
		contact_column.set_attributes(renderer, text=self.__show_column)

		
		
	def __getSelectedNumber(self):
		list = self.__list
		selected = list.get_selection().get_selected_rows()
		selected = selected[1][0]

		row = list.get_model()[selected]

		number = row[self.NUMBER_POSITION]
		return number
	def addToTab(self, notebook):
		type = typeFromLegacyDaemonType(self.__type)
		tabLabel = gtk.Label(config.get(type + '_tab_name') )
		
		notebook.insert_page(self.getTab(), tabLabel)
class GeneralTab (CallsTab):
	#ACTUAL GUI POSTITON
	STATUS_COLUMN = 0	
	CONTACT_COLUMN = 1
	DATE_COLUMN = 2
	def __getStatusColumn(self):
		return self.STATUS_COLUMN
		
	def createList(self):
		CallsTab.createList(self)
		
		renderer = gtk.CellRendererText()
		renderer.set_property('weight', 800)
		renderer.set_property('size-points', 8)
		
		column0 = gtk.TreeViewColumn("Status", renderer, text=4)
		list = self.getList()
		list.insert_column( column0, self.__getStatusColumn() )
	
	


#GENERAL PURPOSE FUNCTIONS
def getLastTime(file = TIME_FILE):
	if not os.path.exists(file):
		return datetime.fromtimestamp(0)
	FILE = open(file,'r')

	line = FILE.readline().strip('\n')
		
	FILE.close()
	
	return datetime.fromtimestamp(float(line))
	
def updateLastTime(file = TIME_FILE):
	FILE = open(file,'w')

	FILE.truncate(0)
	line = FILE.write(str(time.time()))
		
	FILE.close()
def useOphonekit():
	return os.path.exists(OPHONEKITD_DB)
	
	
def stringToTabNumber(string):
	if string.lower() == "received":
		return PAGE_INCOMING
	elif string.lower() == "made":
		return PAGE_OUTGOING
	elif string.lower() == "missed":
		return PAGE_MISSED
	elif string.lower() == "general":
		return PAGE_GENERAL
def typeFromLegacyDaemonType(type):
	if type == "incoming":
		return 'received'
	elif type == "outgoing":
		return 'made'
	elif type == "missed":
		return 'missed'
	elif type == "all":
		return 'general'
	else:
		return "received"
#END OF GENERAL PURPOSE FUNCTIONS


#GET/EDIT DATA FUNCTIONS
def getContact(number):
	global contacts
	for contact in contacts:
		if comparePhoneNumber(contact[2], number):
			return contact[1]
	return ""

def comparePhoneNumber(number1, number2):
	'''
	Compares two phone numbers. They are considered equal if:
	a) One does not contain digits, and they are equal as strings
	or
	b) Both start with a "+", and all following digits are equal
	or
	c) At least one of them does not start with a "+", and the
	   last 7 digits are equal
	'''
	digits1 = filter (lambda c: c.isdigit() or c == '+', number1)
	digits2 = filter (lambda c: c.isdigit() or c == '+', number2)

	if digits1 == '' or digits2 == '':
		return number1 == number2
	if digits1[0] == digits2[0] == '+':
		return digits1 == digits2
	else:
		return digits1[-7:] == digits2[-7:]
		
def getPhonekitCallsList(type):
	get_fields = "number, strftime('%s',startTime), direction"
	if type == "missed":
		calls = database.execute("SELECT %s FROM missed_calls WHERE direction = ? ORDER BY startTime DESC LIMIT ?" % (get_fields,  ) ,\
			(CALL_STATUS_INCOMING, config.get('missed_limit'))).fetchall()
	elif type == "incoming":
		calls = database.execute("SELECT %s FROM calls WHERE direction = ? AND activeTime IS NOT NULL ORDER BY startTime DESC LIMIT ?" % (get_fields, ), \
		(CALL_STATUS_INCOMING, config.get('received_limit'))).fetchall()
	elif type == "outgoing":
		calls = database.execute("SELECT %s FROM calls WHERE direction = ? ORDER BY startTime DESC LIMIT ?" % (get_fields, ), \
			(CALL_STATUS_OUTGOING, config.get('made_limit'))).fetchall()
	elif type == "all":
		calls = database.execute("SELECT %s, activeTime FROM calls ORDER BY startTime DESC LIMIT ?" % (get_fields, ), \
			(config.get('general_limit'),) ).fetchall()
	else:
		return None
	return calls
	

#END OF GET/EDIT DATA

#DBUS FUNCTIONS
def getDbusObject (bus, busname , objectpath , interface):
	dbusObject = bus.get_object(busname, objectpath)
	return dbus.Interface(dbusObject, dbus_interface=interface)
def getPhoneLogObject (bus, busname = PHONELOG_BUSNAME, objectpath = PHONELOG_OBJECTPATH, interface = PHONELOG_INTERFACE):
	return getDbusObject (bus, busname , objectpath , interface)

def getContactsObject (bus, busname = CONTACTS_BUSNAME, objectpath = CONTACTS_OBJECTPATH, interface = CONTACTS_INTERFACE):
	return getDbusObject (bus, busname , objectpath , interface)

def getPhoneObject (bus, busname = PHONE_BUSNAME, objectpath = PHONE_OBJECTPATH, interface = PHONE_INTERFACE):
	return getDbusObject (bus, busname , objectpath , interface)
	
#END OF DBUS FUNCTIONS

#GUI INITIALAZATION


def createSettingsTab():
	vbox = gtk.VBox()

	button = gtk.Button("Clear Incoming")
	vbox.pack_start(button)
	button.connect("clicked", settingsErase_clicked, 'incoming')

	button = gtk.Button("Clear Outgoing")
	vbox.pack_start(button)
	button.connect("clicked", settingsErase_clicked, 'outgoing')
	
	button = gtk.Button("Clear Missed")
	vbox.pack_start(button)
	button.connect("clicked", settingsErase_clicked, 'missed')
	
	button = gtk.Button("Clear All")
	vbox.pack_start(button)
	button.connect("clicked", settingsErase_clicked, 'all')
	
	return vbox



#END OF GUI INITIALAZATION

#GTK
#Callbacks
def settingsErase_clicked (button, list_type):
	global phoneLog
	phoneLog.ClearCallsList(list_type)


def cb_notebook_switch_page (notebook, page, page_num):
	if page_num == PAGE_INCOMING:
		incoming.populateList()
	elif page_num == PAGE_OUTGOING:
		outgoing.populateList()
	elif page_num == PAGE_MISSED:
		missed.populateList()
	elif page_num == PAGE_GENERAL:
		general.populateList(2)
#Data manipulation
#End of GTK

#create the config dir if doesn't exist.
if not os.path.exists(CONFIGURATION_DIR):
	os.mkdir(CONFIGURATION_DIR)

systemBus = dbus.SystemBus()
config = Configuration(CONFIGURATION_FILE)

#init db

if config.get('phonekitd'):
	if not os.path.exists(OPHONEKITD_DB):
		print "Can't Find " + OPHONEKITD_DB + " Falling back to the daemon"
		phoneLog = getPhoneLogObject(systemBus)
		config.setDirect('phonekitd', False)
	database = sqlite3.connect(OPHONEKITD_DB)	
else:
	phoneLog = getPhoneLogObject(systemBus)
	

#init dbus
contactsObject = getContactsObject(systemBus)
phoneObject = getPhoneObject(systemBus)

#init gtk
win = gtk.Window()
win.connect('delete-event', gtk.main_quit)
win.set_title("Phone Log")

last_time = getLastTime()

incoming = CallsTab('incoming', last_time)
outgoing = CallsTab('outgoing', last_time)
missed = CallsTab('missed', last_time, True)
general = GeneralTab("all", last_time)

updateLastTime()

settingsTab = createSettingsTab()

notebook= gtk.Notebook()
win.add (notebook)


incoming.addToTab(notebook)
outgoing.addToTab(notebook)
missed.addToTab(notebook)
general.addToTab(notebook)


#temporary solution:
if not config.get('phonekitd'):
	addTab(notebook, settingsTab, "Settings")

win.show_all()

startup_page = stringToTabNumber( config.get('startup_tab') )
notebook.set_current_page(startup_page)

notebook.connect('switch-page', cb_notebook_switch_page)
#retrieve contacts
contacts = contactsObject.RetrievePhonebook("contacts")

incoming.populateList()
outgoing.populateList()
missed.populateList()
general.populateList(2)

#start


gtk.main()

if config.get('phonekitd'):
	database.close()
