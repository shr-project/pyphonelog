#!/usr/bin/python
# -*- coding: UTF-8 -*-

"""
A sample gtk application used to demonstrate the
use of the phonelogd dbus interface and to have
a working frontend for the purpose.
The bindings might have some minor changes 
(like moving from a 2d array to an array of dictionaries)
though the main idea should be the same.

Written by Tom Hacohen.

Licensed by GPLv2
"""

__version__ = "0.14.0"

import dbus
import gobject, gtk
from datetime import datetime
import time
import os.path
import sqlite3
import shutil
import re

try:
	import mokoui
	use_mokoui = True
except:
	use_mokoui = False

#constants
"""PHONELOG_BUSNAME = "org.freesmartphone.opimd"
PHONELOG_OBJECTPATH = "/org/freesmartphone/PIM/Log"
PHONELOG_INTERFACE = "org.freesmartphone.PIM.Log.Calls"
"""

PHONELOG_BUSNAME = "org.smartphone.opimd"
PHONELOG_OBJECTPATH = "/org/smartphone/PIM/Log"
PHONELOG_INTERFACE = "org.smartphone.PIM.Log.Calls"

CONTACTS_BUSNAME = 'org.freesmartphone.ogsmd'
CONTACTS_OBJECTPATH = '/org/freesmartphone/GSM/Device'
CONTACTS_INTERFACE = 'org.freesmartphone.GSM.SIM'

PHONE_BUSNAME = 'org.freesmartphone.ogsmd'
PHONE_OBJECTPATH = '/org/freesmartphone/GSM/Device'
PHONE_INTERFACE = 'org.freesmartphone.GSM.Call'

TIME_FILE = "/home/root/.phonelog/time.dat"
CONFIGURATION_FILE = "/home/root/.phonelog/phonelog.conf"
DEMO_CONFIG_PATH = "/usr/share/phonelog/skeleton/phonelog.conf"

#OPHONEKITD related
OPHONEKITD_DB = "/var/db/phonelog.db"
CALL_STATUS_INCOMING = 0
CALL_STATUS_OUTGOING = 1
CALL_STATUS_ACTIVE = 2
CALL_STATUS_HELD = 3
CALL_STATUS_RELEASE = 4

#use_ophonekitd = True it's now in the config file instead

#POSITION IN MODEL
CONTACT_POSITION = 0
NUMBER_POSITION = 1
DATE_POSITION = 2
STATUS_POSITION = 4

#ACTUAL GUI POSTITON
CONTACT_COLUMN = 1
DATE_COLUMN = 2
STATUS_COLUMN = 0

#PAGES POSITIONS
PAGE_INCOMING = 0 
PAGE_OUTGOING = 1
PAGE_MISSED = 2
PAGE_GENERAL = 3
PAGE_SETTINGS = 4

#configuration variable
configuration = dict()
# a global used by show number button
show_column = [CONTACT_POSITION, CONTACT_POSITION, CONTACT_POSITION, CONTACT_POSITION, CONTACT_POSITION]

#GENERAL PURPOSE FUNCTIONS
def getLastTime(file = TIME_FILE):
	if not os.path.exists(file):
		return datetime.fromtimestamp(0)
	FILE = open(file,'r')

	line = FILE.readline().strip('\n')
		
	FILE.close()
	
	return datetime.fromtimestamp(float(line))
	
def updateLastTime(file = TIME_FILE):
	FILE = open(file,'w')

	FILE.truncate(0)
	line = FILE.write(str(time.time()))
		
	FILE.close()
def useOphonekit():
	return os.path.exists(OPHONEKITD_DB)
	
	
#END OF GENERAL PURPOSE FUNCTIONS


#GET/EDIT DATA FUNCTIONS
def setDefaultConfiguration():
	configuration['phonekitd'] = True
	configuration['incoming_limit'] = 50
	configuration['outgoing_limit'] = 50
	configuration['missed_limit'] = 50
	configuration['general_limit'] = 50

	return
def getContact(number):
	global contacts
	for contact in contacts:
		if comparePhoneNumber(contact[2], number):
			return contact[1]
	return ""

def comparePhoneNumber(number1, number2):
	'''
	Compares two phone numbers. They are considered equal if:
	a) One does not contain digits, and they are equal as strings
	or
	b) Both start with a "+", and all following digits are equal
	or
	c) At least one of them does not start with a "+", and the
	   last 7 digits are equal
	'''
	digits1 = filter (lambda c: c.isdigit() or c == '+', number1)
	digits2 = filter (lambda c: c.isdigit() or c == '+', number2)

	if digits1 == '' or digits2 == '':
		return number1 == number2
	if digits1[0] == digits2[0] == '+':
		return digits1 == digits2
	else:
		return digits1[-7:] == digits2[-7:]
		
def getPhonekitCallsList(type):
	get_fields = "number, strftime('%s',startTime), direction"
	if type == "missed":
		calls = database.execute("SELECT %s FROM missed_calls WHERE direction = ? ORDER BY startTime DESC LIMIT ?" % (get_fields, getConfiguration('missed_limit') ) , (CALL_STATUS_INCOMING, )).fetchall()
	elif type == "incoming":
		calls = database.execute("SELECT %s FROM calls WHERE direction = ? AND activeTime IS NOT NULL ORDER BY startTime DESC LIMIT ?" % (get_fields, getConfiguration('incoming_limit')), (CALL_STATUS_INCOMING, )).fetchall()
	elif type == "outgoing":
		calls = database.execute("SELECT %s FROM calls WHERE direction = ? ORDER BY startTime DESC LIMIT ?" % (get_fields, ), (CALL_STATUS_OUTGOING, getConfiguration('outgoing_limit'))).fetchall()
	elif type == "all":
		calls = database.execute("SELECT %s, activeTime FROM calls ORDER BY startTime DESC LIMIT ?" % (get_fields, getConfiguration('general_limit')) ).fetchall()
	else:
		return None
		
	return calls
	
def extractBoolean(string):
	low_case = string.lower()
	if low_case == "false":
		return False
	elif low_case == "true":
		return True
	else:
		return None
def extractNumeric(string):
	if re.match('^\d+$',string):
		return int(string)
	elif re.match('^\d+.?\d*$',string):
		return float(string)
	else:
		return None

def setConfiguration(name, value):
	boolean_value = extractBoolean(value)
	if boolean_value != None:
		configuration[name] = boolean_value
		return

	numeric_value = extractNumeric(value)
	if numeric_value != None:
		configuration[name] = numeric_value
		return
def getConfiguration(name):
	if name in configuration:
		return configuration[name]
	else:
		return None
def initConfiguration(file):
	"""
	Reads the signal list from the file given as parameter
	(to launch, interface, busname, path, signal, rules) from to_launch=interface;busname;path;signal;rule1,rule2...
	"""
	setDefaultConfiguration()
	
	if not os.path.exists(file):
		shutil.copy(DEMO_CONFIG_PATH, file)
		
	regex = re.compile('^\s*([^=\s]*)\s*=\s*(.*)\s*\n$')
	comment_regex = re.compile('^\s*#')
	FILE = open(file,'r')

	print "Using configuration:"
	print "*********************"
	for line in FILE:
		if not comment_regex.match(line):
			parsed = regex.match(line)
			#ignore bad config lines
			if parsed != None:
				print line
				setConfiguration(parsed.group(1), parsed.group(2))
	print "*********************"
	print "End of used configuration"
		
	FILE.close()
	
	return True
#END OF GET/EDIT DATA

#DBUS FUNCTIONS
def getDbusObject (bus, busname , objectpath , interface):
	dbusObject = bus.get_object(busname, objectpath)
	return dbus.Interface(dbusObject, dbus_interface=interface)
def getPhoneLogObject (bus, busname = PHONELOG_BUSNAME, objectpath = PHONELOG_OBJECTPATH, interface = PHONELOG_INTERFACE):
	return getDbusObject (bus, busname , objectpath , interface)

def getContactsObject (bus, busname = CONTACTS_BUSNAME, objectpath = CONTACTS_OBJECTPATH, interface = CONTACTS_INTERFACE):
	return getDbusObject (bus, busname , objectpath , interface)

def getPhoneObject (bus, busname = PHONE_BUSNAME, objectpath = PHONE_OBJECTPATH, interface = PHONE_INTERFACE):
	return getDbusObject (bus, busname , objectpath , interface)
	
#END OF DBUS FUNCTIONS

#GUI INITIALAZATION
def createCallsTab(list, page_index):
	page = gtk.VBox()
	page.pack_start( initScrolled(list) )
	buttons = gtk.HBox()
	page.pack_start(buttons, False, padding = 1)

	callButton = gtk.Button("Call")
	callButton.connect ("clicked", callButton_clicked, list)

	numberButton = gtk.Button("Show Numbers")
	numberButton.connect ("clicked", numberButton_clicked, list, page_index)

	buttons.pack_start(callButton, True, padding = 1)
	buttons.pack_start(numberButton, True, padding = 1)
	
	return page
def createListStore():
	return gtk.TreeView (gtk.TreeStore( gobject.TYPE_STRING, 
				gobject.TYPE_STRING,
				gobject.TYPE_STRING,
				gobject.TYPE_BOOLEAN,  #the boolean is there for coloring
				gobject.TYPE_STRING ) #should be changed to an icon?
				)
def createGeneralList():
	#the order of the first 4 matters and assumed by createList
	list = createListStore()
	list = createList(list)

	renderer = gtk.CellRendererText()
	renderer.set_property('weight', 800)
	renderer.set_property('size-points', 8)
	
	column0 = gtk.TreeViewColumn("Status", renderer, text=4)
	list.insert_column( column0, STATUS_COLUMN )
	return list
	
def createList(got_list = None):

	if got_list == None:
		list = createListStore()
	else:
		list = got_list
	
	renderer = gtk.CellRendererText()
	#change text size as well?
	renderer.set_property('weight', 800)

	column0 = gtk.TreeViewColumn("Contact", renderer, text=0, weight_set=3)
	list.insert_column( column0, CONTACT_COLUMN)
	column0 = gtk.TreeViewColumn("Time", renderer, text=2, weight_set=3)
	list.insert_column( column0, DATE_COLUMN )

	return list
	
def initScrolled(tab_content):
	if use_mokoui:
		scrolled = mokoui.FingerScroll()
	else:
		scrolled = gtk.ScrolledWindow()
		scrolled.set_policy(gtk.POLICY_NEVER, gtk.POLICY_AUTOMATIC)

	scrolled.add_with_viewport(tab_content)
	return scrolled
	
def addTab(notebook, tab_content, label):
	tabLabel = gtk.Label(label )
	
	notebook.insert_page(tab_content, tabLabel)


def populateList(list, type, previous_time, visual_flag = False, group_type = 1):
	"""
	group_type =
	0 - never group
	1/everything else - always group
	2 - group from the same type only.
	"""
	global phoneLog

	if getConfiguration('phonekitd'):
		calls = getPhonekitCallsList(type)
		if len(calls) == 0:
			return False
	else:	
		calls = phoneLog.GetCallsList(type)
		try: #hack because i send dbus empty
   			calls[0]
 		except:
			return False

	
	model = list.get_model()

	last_parent_added = None
	
	#add to model
	for call in calls:
		number = call[0]
		contact = getContact(number)
		timestamp = float(call[1])	
		call_time = datetime.fromtimestamp( timestamp )
		status = call[2]

		#handle grouping types
		sametype_group = False
		if group_type == 0:
			#if we don't want to group, change the last_parent_added to None
			last_parent_added = None
		elif group_type == 2:
			sametype_group = True
			#HACK FOR THE GENERAL LIST
			if getConfiguration('phonekitd'):
				missed = (call[3] == None)
				if missed and status == 0:
					status = 2
			else:
				missed = (call[2] == 2)
			
		#check if should be grouped
		parent = None
		if last_parent_added != None:
			if (((last_contact == contact) and (contact != "")) \
					or (last_number == number))\
				and (not sametype_group or last_status == status):
						
				parent = last_parent_added
			
		#update the last_statuses
		last_contact = contact
		last_number = number
		last_status = status


		#HACK for the general. MUST CHANGE!!!
		if sametype_group: 
			last_missed = missed

		#We want the contact to show as the number if it's not in the phonebook.
		if contact == "":
			contact = number
		
		#style status
		if status == 0:
			status = "↑"
		elif status == 1:
			status = "↓"
		elif status == 2:
			status = "↺"
			
		
		parent_added = model.append(parent, ( contact , 
				number ,
				call_time.strftime("%d-%m-%Y %H:%M:%S") ,
				visual_flag and (call_time > previous_time) ,
				status
				)
			)

		if parent == None:
			last_parent_added = parent_added

	return True										

def createSettingsTab():
	vbox = gtk.VBox()

	button = gtk.Button("Clear Incoming")
	vbox.pack_start(button)
	button.connect("clicked", settingsErase_clicked, 'incoming')

	button = gtk.Button("Clear Outgoing")
	vbox.pack_start(button)
	button.connect("clicked", settingsErase_clicked, 'outgoing')
	
	button = gtk.Button("Clear Missed")
	vbox.pack_start(button)
	button.connect("clicked", settingsErase_clicked, 'missed')
	
	button = gtk.Button("Clear All")
	vbox.pack_start(button)
	button.connect("clicked", settingsErase_clicked, 'all')
	
	return vbox



#END OF GUI INITIALAZATION

#GTK
#Callbacks
def settingsErase_clicked (button, list_type):
	global phoneLog
	phoneLog.ClearCallsList(list_type)


def callButton_clicked (button, list):
	global phoneObject
	
	number = getSelectedNumber(list)
	
	if number != None:
		#TODO, once the highlevel api work, change to them.
		phoneObject.Initiate (number, 'voice')
	
def numberButton_clicked (button, list, page):
	global show_column

	#hack, must be a better way to know if it's the general list.
	if page == PAGE_GENERAL:
		get_column = CONTACT_COLUMN 
	else:
		get_column = CONTACT_COLUMN -1

	contact_column = list.get_column(get_column)
	renderer = contact_column.get_cell_renderers()[0]

	
	if show_column[page] == CONTACT_POSITION:
		show_column[page] = NUMBER_POSITION
		button_label = "Show Names"

	else:
		show_column[page] = CONTACT_POSITION
		button_label = "Show Numbers"
		
	button.set_label(button_label)
	contact_column.set_attributes(renderer, text=show_column[page])

	
	
#Data manipulation
def getSelectedNumber(list):
	
	selected = list.get_selection().get_selected_rows()
	selected = selected[1][0]

	row = list.get_model()[selected]

	number = row[NUMBER_POSITION]
	return number
	


#End of GTK


systemBus = dbus.SystemBus()
initConfiguration(CONFIGURATION_FILE)

#init db

if getConfiguration('phonekitd'):
	if not os.path.exists(OPHONEKITD_DB):
		print "Can't Find " + OPHONEKITD_DB + " Falling back to the daemon"
		phoneLog = getPhoneLogObject(systemBus)
		setConfiguration('phonekitd', False)
	database = sqlite3.connect(OPHONEKITD_DB)	
else:
	phoneLog = getPhoneLogObject(systemBus)
	

#init dbus
contactsObject = getContactsObject(systemBus)
phoneObject = getPhoneObject(systemBus)

#init gtk
win = gtk.Window()
win.connect('delete-event', gtk.main_quit)
win.set_title("Phone Log")


notebook= gtk.Notebook()
win.add (notebook)

incomingList = createList()
outgoingList = createList()
missedList = createList()
generalList = createGeneralList()

incomingTab = createCallsTab(incomingList, PAGE_INCOMING)
outgoingTab = createCallsTab(outgoingList, PAGE_OUTGOING)
missedTab = createCallsTab(missedList, PAGE_MISSED)
generalTab = createCallsTab(generalList, PAGE_GENERAL)
settingsTab = createSettingsTab()


addTab(notebook, incomingTab, "Received")
addTab(notebook, outgoingTab, "Made")
addTab(notebook, missedTab, "Missed")
addTab(notebook, generalTab, "All")

#temporary solution:
if not getConfiguration('phonekitd'):
	addTab(notebook, settingsTab, "Settings")

win.show_all()

notebook.set_current_page(PAGE_MISSED)

#retrieve contacts
contacts = contactsObject.RetrievePhonebook("contacts")

last_time = getLastTime()
populateList(incomingList, "incoming", last_time)
populateList(outgoingList, "outgoing", last_time)
populateList(missedList, "missed", last_time, True)
populateList(generalList, "all", last_time, False, 2)

#start
updateLastTime()

gtk.main()

if getConfiguration('phonekitd'):
	database.close()
